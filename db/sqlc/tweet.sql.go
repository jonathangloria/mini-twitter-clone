// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tweet.sql

package db

import (
	"context"
	"time"
)

const createTweet = `-- name: CreateTweet :one
INSERT INTO tweets(
    user_id,
    body
) VALUES (
    $1, $2
) RETURNING id, user_id, body, created_at
`

type CreateTweetParams struct {
	UserID int64  `json:"user_id"`
	Body   string `json:"body"`
}

func (q *Queries) CreateTweet(ctx context.Context, arg CreateTweetParams) (Tweet, error) {
	row := q.db.QueryRowContext(ctx, createTweet, arg.UserID, arg.Body)
	var i Tweet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTweet = `-- name: DeleteTweet :exec
DELETE FROM tweets
WHERE id = $1
`

func (q *Queries) DeleteTweet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTweet, id)
	return err
}

const getFeed = `-- name: GetFeed :many
SELECT tweets.id as tweet_id, users.id as user_id, users.username, tweets.body, tweets.created_at 
FROM tweets 
INNER JOIN users ON users.id = tweets.user_id
INNER JOIN follows ON users.id = follows.user_id
WHERE follows.follower_id = $1 
LIMIT 10 OFFSET $2
`

type GetFeedParams struct {
	FollowerID int64 `json:"follower_id"`
	Offset     int32 `json:"offset"`
}

type GetFeedRow struct {
	TweetID   int64     `json:"tweet_id"`
	UserID    int64     `json:"user_id"`
	Username  string    `json:"username"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetFeed(ctx context.Context, arg GetFeedParams) ([]GetFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeed, arg.FollowerID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFeedRow{}
	for rows.Next() {
		var i GetFeedRow
		if err := rows.Scan(
			&i.TweetID,
			&i.UserID,
			&i.Username,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTweet = `-- name: GetTweet :one
SELECT tweets.id as tweet_id, users.id as user_id, users.username, tweets.body, tweets.created_at 
FROM tweets INNER JOIN users
ON users.id = tweets.user_id
WHERE tweets.id = $1
LIMIT 1
`

type GetTweetRow struct {
	TweetID   int64     `json:"tweet_id"`
	UserID    int64     `json:"user_id"`
	Username  string    `json:"username"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetTweet(ctx context.Context, id int64) (GetTweetRow, error) {
	row := q.db.QueryRowContext(ctx, getTweet, id)
	var i GetTweetRow
	err := row.Scan(
		&i.TweetID,
		&i.UserID,
		&i.Username,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const listTweet = `-- name: ListTweet :many
SELECT tweets.id as tweet_id, users.id as user_id, users.username, tweets.body, tweets.created_at 
FROM tweets INNER JOIN users
ON users.id = tweets.user_id
WHERE tweets.user_id = $1 
LIMIT 10 OFFSET $2
`

type ListTweetParams struct {
	UserID int64 `json:"user_id"`
	Offset int32 `json:"offset"`
}

type ListTweetRow struct {
	TweetID   int64     `json:"tweet_id"`
	UserID    int64     `json:"user_id"`
	Username  string    `json:"username"`
	Body      string    `json:"body"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListTweet(ctx context.Context, arg ListTweetParams) ([]ListTweetRow, error) {
	rows, err := q.db.QueryContext(ctx, listTweet, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTweetRow{}
	for rows.Next() {
		var i ListTweetRow
		if err := rows.Scan(
			&i.TweetID,
			&i.UserID,
			&i.Username,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
