// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  username,
  passhash,
  full_name
) VALUES (
  $1, $2, $3, $4
) RETURNING id, email, username, passhash, full_name, created_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	Passhash string `json:"passhash"`
	FullName string `json:"full_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Passhash,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passhash,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, passhash, full_name, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passhash,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  passhash = COALESCE($1, passhash),
  full_name = COALESCE($2, full_name),
  username = COALESCE($3, username)
WHERE
  id = $4
RETURNING id, email, username, passhash, full_name, created_at
`

type UpdateUserParams struct {
	Passhash sql.NullString `json:"passhash"`
	FullName sql.NullString `json:"full_name"`
	Username sql.NullString `json:"username"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Passhash,
		arg.FullName,
		arg.Username,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Passhash,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}
