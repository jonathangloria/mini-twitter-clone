// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jonathangloria/mini-twitter-clone/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/jonathangloria/mini-twitter-clone/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateFollowing mocks base method.
func (m *MockStore) CreateFollowing(arg0 context.Context, arg1 db.CreateFollowingParams) (db.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollowing", arg0, arg1)
	ret0, _ := ret[0].(db.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollowing indicates an expected call of CreateFollowing.
func (mr *MockStoreMockRecorder) CreateFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollowing", reflect.TypeOf((*MockStore)(nil).CreateFollowing), arg0, arg1)
}

// CreateTweet mocks base method.
func (m *MockStore) CreateTweet(arg0 context.Context, arg1 db.CreateTweetParams) (db.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", arg0, arg1)
	ret0, _ := ret[0].(db.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockStoreMockRecorder) CreateTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockStore)(nil).CreateTweet), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteTweet mocks base method.
func (m *MockStore) DeleteTweet(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTweet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockStoreMockRecorder) DeleteTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockStore)(nil).DeleteTweet), arg0, arg1)
}

// GetFeed mocks base method.
func (m *MockStore) GetFeed(arg0 context.Context, arg1 db.GetFeedParams) ([]db.GetFeedRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0, arg1)
	ret0, _ := ret[0].([]db.GetFeedRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockStoreMockRecorder) GetFeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockStore)(nil).GetFeed), arg0, arg1)
}

// GetTweet mocks base method.
func (m *MockStore) GetTweet(arg0 context.Context, arg1 int64) (db.GetTweetRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweet", arg0, arg1)
	ret0, _ := ret[0].(db.GetTweetRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTweet indicates an expected call of GetTweet.
func (mr *MockStoreMockRecorder) GetTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweet", reflect.TypeOf((*MockStore)(nil).GetTweet), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// ListFollower mocks base method.
func (m *MockStore) ListFollower(arg0 context.Context, arg1 int64) ([]db.ListFollowerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollower", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFollowerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollower indicates an expected call of ListFollower.
func (mr *MockStoreMockRecorder) ListFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollower", reflect.TypeOf((*MockStore)(nil).ListFollower), arg0, arg1)
}

// ListFollowing mocks base method.
func (m *MockStore) ListFollowing(arg0 context.Context, arg1 int64) ([]db.ListFollowingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowing", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFollowingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowing indicates an expected call of ListFollowing.
func (mr *MockStoreMockRecorder) ListFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowing", reflect.TypeOf((*MockStore)(nil).ListFollowing), arg0, arg1)
}

// ListTweet mocks base method.
func (m *MockStore) ListTweet(arg0 context.Context, arg1 db.ListTweetParams) ([]db.ListTweetRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTweet", arg0, arg1)
	ret0, _ := ret[0].([]db.ListTweetRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTweet indicates an expected call of ListTweet.
func (mr *MockStoreMockRecorder) ListTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTweet", reflect.TypeOf((*MockStore)(nil).ListTweet), arg0, arg1)
}

// UpdateTweet mocks base method.
func (m *MockStore) UpdateTweet(arg0 context.Context, arg1 db.UpdateTweetParams) (db.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTweet", arg0, arg1)
	ret0, _ := ret[0].(db.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTweet indicates an expected call of UpdateTweet.
func (mr *MockStoreMockRecorder) UpdateTweet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTweet", reflect.TypeOf((*MockStore)(nil).UpdateTweet), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
